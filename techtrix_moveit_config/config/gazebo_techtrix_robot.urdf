<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from /home/dennis/techtrix_ws/src/techtrix_description/urdf/techtrix.xacro | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="techtrix_robot">
    <!-- Size of square 'camera' box -->
    <material name="black">
        <color rgba="0.0 0.0 0.0 1.0" />
    </material>
    <material name="blue">
        <color rgba="0.0 0.0 0.8 1.0" />
    </material>
    <material name="green">
        <color rgba="0.0 0.8 0.0 1.0" />
    </material>
    <material name="grey">
        <color rgba="0.2 0.2 0.2 1.0" />
    </material>
    <material name="orange">
        <color rgba="1.0 0.4235294117647059 0.0392156862745098 1.0" />
    </material>
    <material name="brown">
        <color rgba="0.8705882352941177 0.8117647058823529 0.7647058823529411 1.0" />
    </material>
    <material name="red">
        <color rgba="0.8 0.0 0.0 1.0" />
    </material>
    <material name="white">
        <color rgba="1.0 1.0 1.0 1.0" />
    </material>
    <!-- camera -->
    <gazebo reference="camera_link">
        <!--The link name must match the link name of the URDF model -->
        <sensor name="camera1" type="camera">
            <!-- The name "camera1" must be unique from all other sensors -->
            <update_rate>30.0</update_rate>
            <!-- Number of times per second a new camera image is taken within Gazebo -->
            <!-- This is the maximum update rate the sensor will attempt during simulation 
                                           but it could fall behind this target rate if the physics simulation runs 
                                           faster than the sensor generation can keep up.-->
            <!-- Next, we set upp the manufacturer;s spects of our physical camera hardware -->
            <!-- Note that the pixels are assumed to be square -->
            <camera name="head">
                <horizontal_fov>1.3962634</horizontal_fov>
                <image>
                    <width>800</width>
                    <height>800</height>
                    <format>R8G8B8</format>
                </image>
                <!-- The near and far clips are simulation-specific 
             parameters that give an upper and lower bound to the distance
             in which the cameras can see objects in the simulation.
             This is specified in the camera's optometry frame. -->
                <clip>
                    <near>0.02</near>
                    <far>300</far>
                </clip>
                <noise>
                    <type>gaussian</type>
                    <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
                    <mean>0.0</mean>
                    <stddev>0.007</stddev>
                </noise>
            </camera>
            <!-- This is where the actual gazebo_ros/gazebo_ros_camera.cpp file is linked to, as a shared object -->
            <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
                <alwaysOn>true</alwaysOn>
                <updateRate>0.0</updateRate>
                <!-- We define the rostopic the camera will be publishing to, for both the image topic and the camera info topic -->
                <cameraName>techtrix/camera1</cameraName>
                <imageTopicName>image_raw</imageTopicName>
                <cameraInfoTopicName>camera_info</cameraInfoTopicName>
                <!-- Hence, for techtrix robot, you should subscribe to:
             /techtrix/camera1/image_raw
             /techtrix/camera1/camera_info-->
                <!-- Finally, we set the coordinate frame the image 
             is published under in the tf tree.-->
                <frameName>camera_link</frameName>
                <hackBaseline>0.07</hackBaseline>
                <distortionK1>0.0</distortionK1>
                <distortionK2>0.0</distortionK2>
                <distortionK3>0.0</distortionK3>
                <distortionT1>0.0</distortionT1>
                <distortionT2>0.0</distortionT2>
            </plugin>
            <!-- <plugin name="gazebo_light_sensor_plugin" filename="libgazebo_light_sensor_plugin.so">
         <cameraName>techtrix/camera1</cameraName>
         <alwaysOn>true</alwaysOn>
         <updateRate>0.0</updateRate>
         <imageTopicName>image_raw</imageTopicName>
         <depthImageTopicName>depth/image_raw</depthImageTopicName>
         <pointCloudTopicName>depth/points</pointCloudTopicName>
         <cameraInfoTopicName>camera_info</cameraInfoTopicName>
         <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
         <frameName>camera_link</frameName>
         <hackBaseline>0.07</hackBaseline>
         <distortionK1>0.0</distortionK1>
         <distortionK2>0.0</distortionK2>
         <distortionK3>0.0</distortionK3>
         <distortionT1>0.0</distortionT1>
         <distortionT2>0.0</distortionT2>
         <pointCloudCutoff>0.4</pointCloudCutoff>
         <robotNamespace>/</robotNamespace>
       </plugin> -->
            <plugin filename="libgazebo_thermal_sensor_plugin.so" name="gazebo_thermal_sensor_plugin">
                <cameraName>techtrix/thermal1</cameraName>
                <alwaysOn>true</alwaysOn>
                <updateRate>0.0</updateRate>
                <imageTopicName>image_raw</imageTopicName>
                <depthImageTopicName>depth/image_raw</depthImageTopicName>
                <pointCloudTopicName>depth/points</pointCloudTopicName>
                <cameraInfoTopicName>camera_info</cameraInfoTopicName>
                <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
                <frameName>camera_link</frameName>
                <robotNamespace>/</robotNamespace>
            </plugin>
            <controller name="thermal_camera_controller" plugin="libgazebo_ros_thermal_depth_camera.so" type="gazebo_ros_thermal_camera">
                <alwaysOn>true</alwaysOn>
                <updateRate>10</updateRate>
                <imageTopicName>/thermal_camera/image_raw</imageTopicName>
                <cameraInfoTopicName>/thermal_camera/camera_info</cameraInfoTopicName>
                <frameName>thermal_optical_frame</frameName>
                <interface name="thermal_camera_iface" type="camera" />
            </controller>
        </sensor>
        <plugin name="gazebo_ros_control">
            <robotNamespace>/</robotNamespace>
        </plugin>
    </gazebo>
    <!-- Used for fixing robot to Gazebo 'base_link' -->
    <link name="world" />
    <link name="frame">
        <collision>
            <origin xyz="0 0 -0.96" />
            <geometry>
                <box size="1.5 1.6 0.3" />
            </geometry>
        </collision>
        <collision>
            <origin xyz="0 0 1.105" />
            <geometry>
                <box size="1.5 1.6 0.12" />
            </geometry>
        </collision>
        <collision>
            <origin xyz="0 0.745 1.105" />
            <geometry>
                <box size="1.5 1.6 0.12" />
            </geometry>
        </collision>
        <collision>
            <origin xyz="0.72 0 0" />
            <geometry>
                <box size="0.1 1.6 2.3" />
            </geometry>
        </collision>
        <collision>
            <origin xyz="-0.72 0 0" />
            <geometry>
                <box size="0.1 1.6 2.3" />
            </geometry>
        </collision>
        <visual>
            <origin rpy="0 0 -1.5707963267948966" xyz="0 0.375 -2.355" />
            <geometry>
                <mesh filename="package://techtrix_description/meshes/techtrix_frame.dae" scale="0.3333333333333333 0.3333333333333333 0.3333333333333333" />
            </geometry>
        </visual>
        <inertial>
            <mass value="1" />
            <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0" />
            <origin xyz="0 0 0" rpy="0 0 0" />
        </inertial>
    </link>
    <link name="bearing">
        <inertial>
            <mass value="1" />
            <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0" />
        </inertial>
    </link>
    <link name="grabber">
        <collision>
            <origin xyz="0 0 -0.015" />
            <geometry>
                <box size="1.375 0.26 0.03" />
            </geometry>
        </collision>
        <visual>
            <origin rpy="0 0 -1.5707963267948966" xyz="0 -1.133 -2.7575" />
            <geometry>
                <mesh filename="package://techtrix_description/meshes/techtrix_grabber.dae" scale="0.3333333333333333 0.3333333333333333 0.3333333333333333" />
            </geometry>
        </visual>
        <inertial>
            <mass value="1" />
            <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0" />
            <origin xyz="0 0 0" rpy="0 0 0" />
        </inertial>
    </link>
    <!-- Camera -->
    <link name="camera_link">
        <collision>
            <origin rpy="0 0 0" xyz="0 0 0" />
            <geometry>
                <box size="0.05 0.05 0.05" />
            </geometry>
        </collision>
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0" />
            <geometry>
                <box size="0.05 0.05 0.05" />
            </geometry>
            <material name="yellow">
                <color rgba="1 1 0 1" />
            </material>
        </visual>
        <sensor name="thermal_camera" type="thermal">
            <camera>
                <horizontal_fov>1.047</horizontal_fov>
                <image>
                    <width>320</width>
                    <height>240</height>
                </image>
                <clip>
                    <near>0.1</near>
                    <far>100</far>
                </clip>
            </camera>
            <always_on>1</always_on>
            <update_rate>30</update_rate>
            <visualize>true</visualize>
            <topic>thermal_camera</topic>
        </sensor>
        <inertial>
            <mass value="1e-5" />
            <origin rpy="0 0 0" xyz="0 0 0" />
            <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
        </inertial>
    </link>
    <joint name="base_joint" type="prismatic">
        <parent link="world" />
        <child link="frame" />
        <axis xyz="0 1 0" />
        <origin xyz="0 0 1.15" />
        <limit effort="1000.0" lower="0" upper="5.75" velocity="0.5" />
    </joint>
    <joint name="lifting_joint" type="prismatic">
        <parent link="frame" />
        <child link="bearing" />
        <axis xyz="0 0 1" />
        <origin xyz="0 1.5 1.025" />
        <limit effort="1000.0" lower="-1.475" upper="0" velocity="0.1" />
    </joint>
    <joint name="rotating_joint" type="revolute">
        <parent link="bearing" />
        <child link="grabber" />
        <axis xyz="0 0 1" />
        <limit effort="1000.0" lower="-1.5707963267948966" upper="0" velocity="0.5" />
    </joint>
    <joint name="camera_joint" type="fixed">
        <parent link="frame" />
        <child link="camera_link" />
        <axis xyz="0 1 0" />
        <origin rpy="0 0 -1.6" xyz="0.05 0 1" />
    </joint>
    <transmission name="base_transmission">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="base_joint">
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        </joint>
        <actuator name="base_motor">
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
            <mechanicalReduction>1</mechanicalReduction>
        </actuator>
    </transmission>
    <transmission name="lifting_transmission">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="lifting_joint">
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        </joint>
        <actuator name="lifting_motor">
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
            <mechanicalReduction>1</mechanicalReduction>
        </actuator>
    </transmission>
    <transmission name="rotating_transmission">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="rotating_joint">
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        </joint>
        <actuator name="rotating_motor">
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
            <mechanicalReduction>1</mechanicalReduction>
        </actuator>
    </transmission>
    <gazebo>
        <plugin filename="libgazebo_ros_control.so" name="gazebo_ros_control">
            <robotNamespace>/techtrix</robotNamespace>
            <robotParam>/techtrix_description</robotParam>
        </plugin>
    </gazebo>
</robot>

